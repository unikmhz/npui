"""Initial revision

Revision ID: b32a4bf96447
Revises: 
Create Date: 2017-09-25 15:45:51.850438

"""

# revision identifiers, used by Alembic.
revision = 'b32a4bf96447'
down_revision = None
branch_labels = ('access',)
depends_on = ['2e190ad964b4', 'e27d4c93c89d', '2429a6e0fecf']

from alembic import op
import sqlalchemy as sa
from sqlalchemy import FetchedValue
from netprofile.db import ddl as npd
from netprofile.db import fields as npf

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('entities_access_linktypes',
    sa.Column('ltid', npf.UInt32(), npd.Comment('Link type ID'), nullable=False, default=sa.Sequence('entities_access_linktypes_ltid_seq', start=101, increment=1)),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Link type name'), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Link type description'), server_default=sa.text('NULL'), nullable=True),
    sa.PrimaryKeyConstraint('ltid', name=op.f('entities_access_linktypes_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('entities_access_linktypes', 'Access entity link types')
    op.create_index('entities_access_linktypes_u_name', 'entities_access_linktypes', ['name'], unique=True)
    op.create_table('entities_access',
    sa.Column('entityid', npf.UInt32(), npd.Comment('Entity ID'), nullable=False),
    sa.Column('pwd_hashed', npf.ASCIIString(length=255), npd.Comment('Primary storage for hashed password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pwd_digestha1', npf.ASCIIFixedString(length=32), npd.Comment('DIGEST-MD5 A1 hash of access entity password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pwd_ntlm', npf.ASCIIFixedString(length=32), npd.Comment('NTLM hash of access entity password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pwd_crypt', npf.ExactUnicode(length=255), npd.Comment('POSIX crypt hash of access entity password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pwd_plain', npf.ExactUnicode(length=255), npd.Comment('Plaintext access entity password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('stashid', npf.UInt32(), npd.Comment('Used stash ID'), nullable=False),
    sa.Column('rateid', npf.UInt32(), npd.Comment('Used rate ID'), nullable=False),
    sa.Column('aliasid', npf.UInt32(), npd.Comment('Aliased access entity ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('nextrateid', npf.UInt32(), npd.Comment('Next rate ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('ipaddrid', npf.UInt32(), npd.Comment('IPv4 address ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('ip6addrid', npf.UInt64(), npd.Comment('IPv6 address ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('ut_ingress', npf.Traffic(precision=16, scale=0), npd.Comment('Used ingress traffic'), server_default=sa.text('0'), nullable=False),
    sa.Column('ut_egress', npf.Traffic(precision=16, scale=0), npd.Comment('Used egress traffic'), server_default=sa.text('0'), nullable=False),
    sa.Column('u_sec', npf.UInt32(), npd.Comment('Used seconds'), server_default=sa.text('0'), nullable=False),
    sa.Column('qpend', sa.TIMESTAMP(), npd.Comment('End of quota period'), server_default=FetchedValue(), nullable=True),
    sa.Column('state', npf.UInt8(), npd.Comment('Access code'), server_default=sa.text('0'), nullable=False),
    sa.Column('pol_ingress', npf.ASCIIString(length=255), npd.Comment('Ingress traffic policy'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pol_egress', npf.ASCIIString(length=255), npd.Comment('Egress traffic policy'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('bcheck', npf.NPBoolean(), npd.Comment('Check block state'), server_default=npf.npbool(False), nullable=False),
    sa.Column('pcheck', npf.NPBoolean(), npd.Comment('Check paid services'), server_default=npf.npbool(False), nullable=False),
    sa.ForeignKeyConstraint(['aliasid'], ['entities_access.entityid'], name='entities_access_fk_aliasid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['entityid'], ['entities_def.entityid'], name='entities_access_fk_entityid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ip6addrid'], ['ip6addr_def.ip6addrid'], name='entities_access_fk_ip6addrid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ipaddrid'], ['ipaddr_def.ipaddrid'], name='entities_access_fk_ipaddrid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['nextrateid'], ['rates_def.rateid'], name='entities_access_fk_nextrateid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['rateid'], ['rates_def.rateid'], name='entities_access_fk_rateid', onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['stashid'], ['stashes_def.stashid'], name='entities_access_fk_stashid', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('entityid', name=op.f('entities_access_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('entities_access', 'Access entities')
    op.create_trigger('netprofile_access', 'entities_access', 'before', 'insert', 'b32a4bf96447')
    op.create_trigger('netprofile_access', 'entities_access', 'before', 'update', 'b32a4bf96447')
    op.create_trigger('netprofile_access', 'entities_access', 'after', 'update', 'b32a4bf96447')
    op.create_trigger('netprofile_access', 'entities_access', 'after', 'delete', 'b32a4bf96447')
    op.create_index('entities_access_i_aliasid', 'entities_access', ['aliasid'], unique=False)
    op.create_index('entities_access_i_ip6addrid', 'entities_access', ['ip6addrid'], unique=False)
    op.create_index('entities_access_i_ipaddrid', 'entities_access', ['ipaddrid'], unique=False)
    op.create_index('entities_access_i_nextrateid', 'entities_access', ['nextrateid'], unique=False)
    op.create_index('entities_access_i_rateid', 'entities_access', ['rateid'], unique=False)
    op.create_index('entities_access_i_stashid', 'entities_access', ['stashid'], unique=False)
    op.create_table('accessblock_def',
    sa.Column('abid', npf.UInt32(), npd.Comment('Access block ID'), nullable=False, default=sa.Sequence('accessblock_def_abid_seq')),
    sa.Column('entityid', npf.UInt32(), npd.Comment('Access entity ID'), nullable=False),
    sa.Column('startts', sa.TIMESTAMP(), npd.Comment('Start of block'), server_default=npd.CurrentTimestampDefault(on_update=False), nullable=False),
    sa.Column('endts', sa.TIMESTAMP(), npd.Comment('End of block'), nullable=False),
    sa.Column('bstate', npf.DeclEnumType(name='AccessBlockState', values=['planned', 'active', 'expired']), npd.Comment('Block state'), server_default=sa.text("'expired'"), nullable=False),
    sa.Column('oldstate', npf.UInt8(), npd.Comment('Old entity state'), server_default=sa.text('0'), nullable=False),
    sa.ForeignKeyConstraint(['entityid'], ['entities_access.entityid'], name='accessblock_def_fk_entityid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('abid', name=op.f('accessblock_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('accessblock_def', 'Access entity blocks')
    op.create_trigger('netprofile_access', 'accessblock_def', 'before', 'insert', 'b32a4bf96447')
    op.create_trigger('netprofile_access', 'accessblock_def', 'before', 'update', 'b32a4bf96447')
    op.create_trigger('netprofile_access', 'accessblock_def', 'after', 'insert', 'b32a4bf96447')
    op.create_trigger('netprofile_access', 'accessblock_def', 'after', 'update', 'b32a4bf96447')
    op.create_index('accessblock_def_i_bstate_start', 'accessblock_def', ['bstate', 'startts'], unique=False)
    op.create_index('accessblock_def_i_entityid', 'accessblock_def', ['entityid'], unique=False)
    op.create_index('accessblock_def_i_startts', 'accessblock_def', ['startts'], unique=False)
    op.create_table('entities_access_changes',
    sa.Column('aecid', npf.UInt64(), npd.Comment('Access entity change ID'), nullable=False, default=sa.Sequence('entities_access_changes_aecid_seq')),
    sa.Column('entityid', npf.UInt32(), npd.Comment('Access entity ID'), nullable=False),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('ts', sa.TIMESTAMP(), npd.Comment('Entity change timestamp'), server_default=npd.CurrentTimestampDefault(on_update=False), nullable=False),
    sa.Column('pwchanged', npf.NPBoolean(), npd.Comment('Password was changed'), server_default=npf.npbool(False), nullable=False),
    sa.Column('state_old', npf.UInt8(), npd.Comment('Old access code'), server_default=sa.text('0'), nullable=False),
    sa.Column('state_new', npf.UInt8(), npd.Comment('New access code'), server_default=sa.text('0'), nullable=False),
    sa.Column('rateid_old', npf.UInt32(), npd.Comment('Old rate ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('rateid_new', npf.UInt32(), npd.Comment('New rate ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Access entity change description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['entityid'], ['entities_access.entityid'], name='entities_access_changes_fk_entityid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rateid_new'], ['rates_def.rateid'], name='entities_access_changes_fk_rateid_new', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['rateid_old'], ['rates_def.rateid'], name='entities_access_changes_fk_rateid_old', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='entities_access_changes_fk_uid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('aecid', name=op.f('entities_access_changes_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('entities_access_changes', 'Changes to access entities')
    op.create_index('entities_access_changes_i_entityid', 'entities_access_changes', ['entityid'], unique=False)
    op.create_index('entities_access_changes_i_rateid_new', 'entities_access_changes', ['rateid_new'], unique=False)
    op.create_index('entities_access_changes_i_rateid_old', 'entities_access_changes', ['rateid_old'], unique=False)
    op.create_index('entities_access_changes_i_ts', 'entities_access_changes', ['ts'], unique=False)
    op.create_index('entities_access_changes_i_uid', 'entities_access_changes', ['uid'], unique=False)
    op.create_table('entities_access_links',
    sa.Column('lid', npf.UInt32(), npd.Comment('Link ID'), nullable=False, default=sa.Sequence('entities_access_links_lid_seq')),
    sa.Column('entityid', npf.UInt32(), npd.Comment('Access entity ID'), nullable=False),
    sa.Column('ltid', npf.UInt32(), npd.Comment('Link type ID'), nullable=False),
    sa.Column('ts', sa.TIMESTAMP(), npd.Comment('Service timestamp'), server_default=npd.CurrentTimestampDefault(on_update=False), nullable=True),
    sa.Column('value', sa.Unicode(length=255), npd.Comment('Link value'), nullable=False),
    sa.ForeignKeyConstraint(['entityid'], ['entities_access.entityid'], name='entities_access_links_fk_entityid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ltid'], ['entities_access_linktypes.ltid'], name='entities_access_links_fk_ltid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('lid', name=op.f('entities_access_links_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('entities_access_links', 'Access entity links')
    op.create_index('entities_access_links_i_entityid', 'entities_access_links', ['entityid'], unique=False)
    op.create_index('entities_access_links_i_ltid', 'entities_access_links', ['ltid'], unique=False)
    op.create_index('entities_access_links_i_value', 'entities_access_links', ['value'], unique=False)
    op.create_table('rates_mods_peruser',
    sa.Column('rmid', npf.UInt32(), npd.Comment('Rate modifier ID'), nullable=False, default=sa.Sequence('rates_mods_peruser_rmid_seq')),
    sa.Column('rmtid', npf.UInt32(), npd.Comment('Rate modifier type ID'), nullable=False),
    sa.Column('entityid', npf.UInt32(), npd.Comment('Access entity ID'), nullable=False),
    sa.Column('rateid', npf.UInt32(), npd.Comment('Rate ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('ctime', sa.TIMESTAMP(), npd.Comment('Creation timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('enabled', npf.NPBoolean(), npd.Comment('Is modifier enabled?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('l_ord', npf.UInt16(), npd.Comment('Lookup order'), server_default=sa.text('1000'), nullable=False),
    sa.ForeignKeyConstraint(['entityid'], ['entities_access.entityid'], name='rates_mods_peruser_fk_entityid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rateid'], ['rates_def.rateid'], name='rates_mods_peruser_fk_rateid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rmtid'], ['rates_mods_types.rmtid'], name='rates_mods_peruser_fk_rmtid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rmid', name=op.f('rates_mods_peruser_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('rates_mods_peruser', 'Per-user rate modifiers')
    op.create_trigger('netprofile_access', 'rates_mods_peruser', 'before', 'insert', 'b32a4bf96447')
    op.create_index('rates_mods_peruser_i_entityid', 'rates_mods_peruser', ['entityid'], unique=False)
    op.create_index('rates_mods_peruser_i_l_ord', 'rates_mods_peruser', ['l_ord'], unique=False)
    op.create_index('rates_mods_peruser_i_rateid', 'rates_mods_peruser', ['rateid'], unique=False)
    op.create_index('rates_mods_peruser_u_mapping', 'rates_mods_peruser', ['rmtid', 'entityid', 'rateid'], unique=True)
    op.create_function('access', npd.SQLFunction('acct_rate_mods', args=[npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN'), npd.SQLFunctionArgument('rateid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('entityid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('oqsum_in', npf.Money(precision=20, scale=8), 'INOUT'), npd.SQLFunctionArgument('oqsum_eg', npf.Money(precision=20, scale=8), 'INOUT'), npd.SQLFunctionArgument('oqsum_sec', npf.Money(precision=20, scale=8), 'INOUT'), npd.SQLFunctionArgument('pol_in', npf.ASCIIString(length=255), 'INOUT'), npd.SQLFunctionArgument('pol_eg', npf.ASCIIString(length=255), 'INOUT')], returns=None, comment='Apply rate modifiers', reads_sql=True, writes_sql=False, is_procedure=True, label='armfunc'), 'b32a4bf96447')
    op.create_function('access', npd.SQLFunction('acct_poll', args=[npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN')], returns=None, comment='Poll accounts for time-based changes', reads_sql=True, writes_sql=True, is_procedure=True, label=None), 'b32a4bf96447')
    op.create_function('access', npd.SQLFunction('check_auth', args=[npd.SQLFunctionArgument('name', sa.Unicode(length=255), None), npd.SQLFunctionArgument('pass', sa.Unicode(length=255), None)], returns=sa.Boolean(), comment='Check auth information', reads_sql=True, writes_sql=False, is_procedure=False, label=None), 'b32a4bf96447')
    op.create_function('access', npd.SQLFunction('acct_authz', args=[npd.SQLFunctionArgument('name', sa.Unicode(length=255), 'IN')], returns=None, comment='Get authorized account info', reads_sql=True, writes_sql=False, is_procedure=True, label='authzfunc'), 'b32a4bf96447')
    op.create_function('access', npd.SQLFunction('acct_rollback', args=[npd.SQLFunctionArgument('aeid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN'), npd.SQLFunctionArgument('xstashid', npf.UInt32(), 'INOUT'), npd.SQLFunctionArgument('xrateid_old', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('xrateid_new', npf.UInt32(), 'INOUT'), npd.SQLFunctionArgument('uti', npf.Traffic(precision=16, scale=0), 'INOUT'), npd.SQLFunctionArgument('ute', npf.Traffic(precision=16, scale=0), 'INOUT'), npd.SQLFunctionArgument('xqpend', sa.DateTime(), 'INOUT'), npd.SQLFunctionArgument('xstate', npf.UInt8(), 'INOUT'), npd.SQLFunctionArgument('xdiff', npf.Money(precision=20, scale=8), 'OUT')], returns=None, comment='Rollback current period for an account', reads_sql=True, writes_sql=True, is_procedure=True, label='rbfunc'), 'b32a4bf96447')
    op.create_function('access', npd.SQLFunction('acct_add', args=[npd.SQLFunctionArgument('aeid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('username', sa.Unicode(length=255), 'IN'), npd.SQLFunctionArgument('tin', npf.Traffic(precision=16, scale=0), 'IN'), npd.SQLFunctionArgument('teg', npf.Traffic(precision=16, scale=0), 'IN'), npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN')], returns=None, comment='Add accounting information', reads_sql=True, writes_sql=True, is_procedure=True, label='aafunc'), 'b32a4bf96447')
    op.create_event('access', npd.SQLEvent('ev_acct_poll', sched_unit='day', sched_interval=1, starts=datetime.datetime(2017, 9, 25, 0, 0, 1), preserve=True, enabled=True, comment='Perform passive accounting'), 'b32a4bf96447')
    op.create_event('access', npd.SQLEvent('ev_accessblock_expire', sched_unit='day', sched_interval=1, starts=None, preserve=True, enabled=True, comment='Find and mark expired access blocks'), 'b32a4bf96447')
    op.create_table('netdev_bindings',
    sa.Column('ndbid', npf.UInt32(), npd.Comment('Network device binding ID'), nullable=False, default=sa.Sequence('netdev_bindings_ndbid_seq')),
    sa.Column('hostid', npf.UInt32(), npd.Comment('Host ID'), nullable=False),
    sa.Column('did', npf.UInt32(), npd.Comment('Device ID'), nullable=False),
    sa.Column('ifid', npf.UInt32(), npd.Comment('Network device interface ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('index', npf.UInt32(), npd.Comment('Interface SNMP ifIndex'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('circuitid', sa.VARBINARY(length=32), npd.Comment('Binary agent circuit ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('rateid', npf.UInt32(), npd.Comment('Optional rate ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('att_cable', npf.UInt32(), npd.Comment('Cable length (in meters)'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('att_did', npf.UInt32(), npd.Comment('Attached device ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Network device binding description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['att_did'], ['devices_network.did'], name='netdev_bindings_fk_att_did', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['did'], ['devices_network.did'], name='netdev_bindings_fk_did', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['hostid'], ['hosts_def.hostid'], name='netdev_bindings_fk_hostid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ifid'], ['netdev_ifaces.ifid'], name='netdev_bindings_fk_ifid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['rateid'], ['rates_def.rateid'], name='netdev_bindings_fk_rateid', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('ndbid', name=op.f('netdev_bindings_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('netdev_bindings', 'Network device interface bindings')
    op.create_index('netdev_bindings_i_att_did', 'netdev_bindings', ['att_did'], unique=False)
    op.create_index('netdev_bindings_i_circuitid', 'netdev_bindings', ['circuitid'], unique=False)
    op.create_index('netdev_bindings_i_did', 'netdev_bindings', ['did'], unique=False)
    op.create_index('netdev_bindings_i_hostid', 'netdev_bindings', ['hostid'], unique=False)
    op.create_index('netdev_bindings_i_ifid', 'netdev_bindings', ['ifid'], unique=False)
    op.create_index('netdev_bindings_i_index', 'netdev_bindings', ['index'], unique=False)
    op.create_index('netdev_bindings_i_rateid', 'netdev_bindings', ['rateid'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_event('access', npd.SQLEvent('ev_accessblock_expire', sched_unit='day', sched_interval=1, starts=None, preserve=True, enabled=True, comment='Find and mark expired access blocks'), 'b32a4bf96447')
    op.drop_event('access', npd.SQLEvent('ev_acct_poll', sched_unit='day', sched_interval=1, starts=datetime.datetime(2017, 9, 25, 0, 0, 1), preserve=True, enabled=True, comment='Perform passive accounting'), 'b32a4bf96447')
    op.drop_function('access', npd.SQLFunction('acct_add', args=[npd.SQLFunctionArgument('aeid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('username', sa.Unicode(length=255), 'IN'), npd.SQLFunctionArgument('tin', npf.Traffic(precision=16, scale=0), 'IN'), npd.SQLFunctionArgument('teg', npf.Traffic(precision=16, scale=0), 'IN'), npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN')], returns=None, comment='Add accounting information', reads_sql=True, writes_sql=True, is_procedure=True, label='aafunc'), 'b32a4bf96447')
    op.drop_function('access', npd.SQLFunction('acct_rollback', args=[npd.SQLFunctionArgument('aeid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN'), npd.SQLFunctionArgument('xstashid', npf.UInt32(), 'INOUT'), npd.SQLFunctionArgument('xrateid_old', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('xrateid_new', npf.UInt32(), 'INOUT'), npd.SQLFunctionArgument('uti', npf.Traffic(precision=16, scale=0), 'INOUT'), npd.SQLFunctionArgument('ute', npf.Traffic(precision=16, scale=0), 'INOUT'), npd.SQLFunctionArgument('xqpend', sa.DateTime(), 'INOUT'), npd.SQLFunctionArgument('xstate', npf.UInt8(), 'INOUT'), npd.SQLFunctionArgument('xdiff', npf.Money(precision=20, scale=8), 'OUT')], returns=None, comment='Rollback current period for an account', reads_sql=True, writes_sql=True, is_procedure=True, label='rbfunc'), 'b32a4bf96447')
    op.drop_function('access', npd.SQLFunction('acct_authz', args=[npd.SQLFunctionArgument('name', sa.Unicode(length=255), 'IN')], returns=None, comment='Get authorized account info', reads_sql=True, writes_sql=False, is_procedure=True, label='authzfunc'), 'b32a4bf96447')
    op.drop_function('access', npd.SQLFunction('check_auth', args=[npd.SQLFunctionArgument('name', sa.Unicode(length=255), None), npd.SQLFunctionArgument('pass', sa.Unicode(length=255), None)], returns=sa.Boolean(), comment='Check auth information', reads_sql=True, writes_sql=False, is_procedure=False, label=None), 'b32a4bf96447')
    op.drop_function('access', npd.SQLFunction('acct_poll', args=[npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN')], returns=None, comment='Poll accounts for time-based changes', reads_sql=True, writes_sql=True, is_procedure=True, label=None), 'b32a4bf96447')
    op.drop_function('access', npd.SQLFunction('acct_rate_mods', args=[npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN'), npd.SQLFunctionArgument('rateid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('entityid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('oqsum_in', npf.Money(precision=20, scale=8), 'INOUT'), npd.SQLFunctionArgument('oqsum_eg', npf.Money(precision=20, scale=8), 'INOUT'), npd.SQLFunctionArgument('oqsum_sec', npf.Money(precision=20, scale=8), 'INOUT'), npd.SQLFunctionArgument('pol_in', npf.ASCIIString(length=255), 'INOUT'), npd.SQLFunctionArgument('pol_eg', npf.ASCIIString(length=255), 'INOUT')], returns=None, comment='Apply rate modifiers', reads_sql=True, writes_sql=False, is_procedure=True, label='armfunc'), 'b32a4bf96447')
    op.drop_index('netdev_bindings_i_rateid', table_name='netdev_bindings')
    op.drop_index('netdev_bindings_i_index', table_name='netdev_bindings')
    op.drop_index('netdev_bindings_i_ifid', table_name='netdev_bindings')
    op.drop_index('netdev_bindings_i_hostid', table_name='netdev_bindings')
    op.drop_index('netdev_bindings_i_did', table_name='netdev_bindings')
    op.drop_index('netdev_bindings_i_circuitid', table_name='netdev_bindings')
    op.drop_index('netdev_bindings_i_att_did', table_name='netdev_bindings')
    op.drop_table('netdev_bindings')
    op.drop_index('rates_mods_peruser_u_mapping', table_name='rates_mods_peruser')
    op.drop_index('rates_mods_peruser_i_rateid', table_name='rates_mods_peruser')
    op.drop_index('rates_mods_peruser_i_l_ord', table_name='rates_mods_peruser')
    op.drop_index('rates_mods_peruser_i_entityid', table_name='rates_mods_peruser')
    op.drop_table('rates_mods_peruser')
    op.drop_index('entities_access_links_i_value', table_name='entities_access_links')
    op.drop_index('entities_access_links_i_ltid', table_name='entities_access_links')
    op.drop_index('entities_access_links_i_entityid', table_name='entities_access_links')
    op.drop_table('entities_access_links')
    op.drop_index('entities_access_changes_i_uid', table_name='entities_access_changes')
    op.drop_index('entities_access_changes_i_ts', table_name='entities_access_changes')
    op.drop_index('entities_access_changes_i_rateid_old', table_name='entities_access_changes')
    op.drop_index('entities_access_changes_i_rateid_new', table_name='entities_access_changes')
    op.drop_index('entities_access_changes_i_entityid', table_name='entities_access_changes')
    op.drop_table('entities_access_changes')
    op.drop_index('accessblock_def_i_startts', table_name='accessblock_def')
    op.drop_index('accessblock_def_i_entityid', table_name='accessblock_def')
    op.drop_index('accessblock_def_i_bstate_start', table_name='accessblock_def')
    op.drop_table('accessblock_def')
    op.drop_index('entities_access_i_stashid', table_name='entities_access')
    op.drop_index('entities_access_i_rateid', table_name='entities_access')
    op.drop_index('entities_access_i_nextrateid', table_name='entities_access')
    op.drop_index('entities_access_i_ipaddrid', table_name='entities_access')
    op.drop_index('entities_access_i_ip6addrid', table_name='entities_access')
    op.drop_index('entities_access_i_aliasid', table_name='entities_access')
    op.drop_table('entities_access')
    op.drop_index('entities_access_linktypes_u_name', table_name='entities_access_linktypes')
    op.drop_table('entities_access_linktypes')
    # ### end Alembic commands ###

